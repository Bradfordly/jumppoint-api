AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS API Gateway REST API for the Knowhere Gamehost System

Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs20.x
    MemorySize: 128
    Timeout: 15

Parameters:
  AppName:
    Description: Name of the API Gateway
    Type: String
    Default: jump-point-api
  KnowhereEC2Id:
    Description: EC2 Instance ID of the Knowhere host
    Type: String
    Default: i-09a8fc3dd12e9c4ad

Resources:
  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AppName}-lgsm-send-command'
      Handler: app.handler
      Environment:
        Variables:
          KNOWHERE_EC2_ID: ${KnowhereEC2Id}

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AppName
      Description: REST API for managing the Knowhere Gamehost System.
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestApiRequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: MyAPIRequestValidator
        RestApiId: !Ref RestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

  RestApiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: LGSMSendCommandModel
      ContentType: 'application/json'
      RestApiId: !Ref RestApi
      Schema: {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "title": "Person",
          "type": "object",
          "required": [ "command", "game" ],
          "properties": {
            "command": {
              "type": "string",
              "enum": ["start", "stop", "backup"]
              "description": "The LinuxGSM command to be ran."
              },
              "game": {
                "type": "string",
                "enum": ["minecraft", "palworld"]
                "description": "The game server to receive the LinuxGSM command."
              }
            }
        }

  RestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RequestModels:
        $default: !Ref RestApiModel
      RequestParameters:
        method.request.querystring.myQueryString: true
        method.request.header.myHeader: true
      RequestValidatorId: !GetAtt RestApiRequestValidator.RequestValidatorId
      MethodResponses:
        - ResponseModels:
            application/json : 'Empty'
          StatusCode: 200
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RestApiMethod
    Properties:
      Description: Jump Point Rest API Deployment
      RestApiId: !Ref RestApi

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestApiDeployment
      Description: Lambda API Stage
      RestApiId: !Ref RestApi
      StageName: prod

  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*'
